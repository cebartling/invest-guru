service: InvestGuruPrototype1

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.38.0"

plugins:
  - serverless-offline
  - serverless-dynamodb-local
#  - serverless-appsync-plugin
#  - serverless-finch

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  profile: InvestGuruAdmin

custom:
  name: "InvestGuruPrototype1API"

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: invest_guru.handlers.hello_handler.hello
#    events:
#      - http:
#          path: /hello
#          method: get

resources:
  Resources:
    CognitoSNSPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Managed policy to allow Amazon Cognito to access SNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSNSPublishing
              Effect: Allow
              Action:
                - sns:publish
              Resource: "*"

    SNSRole:
      Type: AWS::IAM::Role
      Description: "An IAM Role to allow Cognito to send SNS messages"
      Properties:
        RoleName: ${self:custom.name}-cognito-sns-role
        ManagedPolicyArns:
          - Ref: CognitoSNSPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
      DependsOn:
        - CognitoSNSPolicy

    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: allow-access-to-lambda-from-appsync
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: lambda:invokeFunction
                  Resource:
                    - { Fn::GetAtt: [ HelloLambdaFunction, Arn ] }
                    - { Fn::Join: [ '', [ { Fn::GetAtt: [ HelloLambdaFunction, Arn ] }, '*' ] ] }

    LoggingLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { Fn::GetAtt: [ HelloLambdaFunction, Arn ] }
        Action: lambda:InvokeFunction
        Principal: { Fn::Join: ["", ["logs.", { Ref: AWS::Region}, ".amazonaws.com" ] ] }


#    UserPool:
#      Type: "AWS::Cognito::UserPool"
#      Description: "A Cognito user pool for authenticating users"
#      Properties:
#        UserPoolName: ${self:custom.name}-user-pool
#        AutoVerifiedAttributes:
#          - phone_number
#        MfaConfiguration: "ON"
#        SmsConfiguration:
#          ExternalId: ${self:custom.name}-external
#          SnsCallerArn: { Fn::GetAtt: [SNSRole, Arn] }
#        Schema:
#          - Name: name
#            AttributeDataType: String
#            Mutable: true
#            Required: true
#          - Name: email
#            AttributeDataType: String
#            Mutable: false
#            Required: true
#          - Name: phone_number
#            AttributeDataType: String
#            Mutable: false
#            Required: true
#
#    UserPoolClient:
#      Type: "AWS::Cognito::UserPoolClient"
#      Description: "App Client used by AWS AppSync"
#      Properties:
#        ClientName: ${self:custom.name}-appsync-client
#        GenerateSecret: false
#        UserPoolId: { Ref: UserPool }

#    DynamoDBNotesTable:
#      Type: "AWS::DynamoDB::Table"
#      Description: "Data store for AWS AppSync Notes Type"
#      Properties:
#        TableName: ${self:custom.name}-notes-table
#        AttributeDefinitions:
#          - AttributeName: "NoteId"
#            AttributeType: "S"
#          - AttributeName: "UserId"
#            AttributeType: "S"
#        KeySchema:
#          - AttributeName: "NoteId"
#            KeyType: "HASH"
#          - AttributeName: "UserId"
#            KeyType: "RANGE"
#        ProvisionedThroughput:
#          ReadCapacityUnits: 5
#          WriteCapacityUnits: 5
#
#    DynamoDBRole:
#      Type: AWS::IAM::Role
#      Properties:
#        RoleName: ${self:custom.name}-appsync-dynamodb-role
#        ManagedPolicyArns:
#          - Ref: AppSyncDynamoDBPolicy
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: Allow
#              Action:
#                - sts:AssumeRole
#              Principal:
#                Service:
#                  - appsync.amazonaws.com
#      DependsOn:
#        - AppSyncDynamoDBPolicy
#
#    AppSyncDynamoDBPolicy:
#      Type: AWS::IAM::ManagedPolicy
#      Properties:
#        Description: Managed policy to allow AWS AppSync to access the tables created by this template.
#        Path: /appsync/
#        PolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: Allow
#              Action:
#                - dynamodb:GetItem
#                - dynamodb:PutItem
#                - dynamodb:DeleteItem
#                - dynamodb:UpdateItem
#                - dynamodb:Query
#                - dynamodb:Scan
#                - dynamodb:BatchGetItem
#                - dynamodb:BatchWriteItem
#              Resource: { Fn::Join: [ '', [ { Fn::GetAtt: [ DynamoDBNotesTable, Arn ] }, '*' ] ] }
#
#    AppSyncApi:
#      Type: "AWS::AppSync::GraphQLApi"
#      Description: "The Invest Guru GraphQL API"
#      Properties:
##        AuthenticationType: "API_KEY"
#        AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
#        Name: ${self:custom.name}
#        UserPoolConfig:
#          UserPoolId: { Ref: UserPoolClient }
#          AwsRegion: "us-east-1"
#          DefaultAction: "ALLOW"

#    AppSyncAPIKey:
#      Type: "AWS::AppSync::ApiKey"
#      Properties:
#        ApiId: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
#        Expires: { Ref: ParamKeyExpiration }

#    AppSyncSchema:
#      Type: "AWS::AppSync::GraphQLSchema"
#      Properties:
#        ApiId: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
#        Definition: |
#          type Note {
#            NoteId: ID!
#            title: String
#            content: String
#          }
#          type PaginatedNotes {
#            notes: [Note!]!
#            nextToken: String
#          }
#          type Query {
#            helloWorld(name: String!): String!
#            allNotes(limit: Int, nextToken: String): PaginatedNotes!
#            getNote(NoteId: ID!): Note
#          }
#          type Mutation {
#            saveNote(NoteId: ID!, title: String!, content: String!): Note
#            deleteNote(NoteId: ID!): Note
#          }
#          type Schema {
#            query: Query
#            mutation: Mutation
#          }
#
#    AppSyncNotesTableDataSource:
#      Type: "AWS::AppSync::DataSource"
#      Properties:
#        ApiId: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
#        Name: ${self:custom.name}_notes_table
#        Description: "The Notes Table AppSync Data Source"
#        Type: AMAZON_DYNAMODB
#        ServiceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
#        DynamoDBConfig:
#          TableName: { Ref: DynamoDBNotesTable }
#          AwsRegion: "us-east-1"

#    AppSyncHelloWorldLambdaDataSource:
#      Type: AWS::AppSync::DataSource
#      Properties:
#        ApiId: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
#        Name: ${self:custom.name}-${self:provider.stage}-hello_datasource
#        Type: AWS_LAMBDA
#        LambdaConfig:
#          LambdaFunctionArn: { Fn::GetAtt: [ Lambda, Arn ] }
#          ServiceRoleArn: { Fn::GetAtt: [ Role, Arn ] }

#    AppSyncResolver:
#      Type: AWS::AppSync::Resolver
#      Properties:
#        ApiId: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
#        TypeName: Query
#        FieldName: feed
#        DataSourceName: !GetAtt [ AppSyncDataSource, Name ]
#        RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": $util.toJson($context.arguments) }'
#        ResponseMappingTemplate: '$util.toJson($context.result)'

#    AppSyncHelloWorldQueryResolver:
#      Type: "AWS::AppSync::Resolver"
#      DependsOn: AppSyncSchema
#      Properties:
#        ApiId: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
#        TypeName: Query
#        FieldName: helloWorld
#        DataSourceName: { Fn::GetAtt: [ AppSyncHelloWorldLambdaDataSource, Name ] }
#        RequestMappingTemplate: |
#          {
#            "version": "2017-02-28",
#            "operation": "Invoke",
#            "payload": $utils.toJson($context.arguments)
#          }
#        ResponseMappingTemplate: "$util.toJson($ctx.result)"

#    AppSyncAllNotesQueryResolver:
#      Type: "AWS::AppSync::Resolver"
#      DependsOn: AppSyncSchema
#      Properties:
#        ApiId: !GetAtt AppSyncApi.ApiId
#        TypeName: Query
#        FieldName: allNotes
#        DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
#        RequestMappingTemplate: |
#          {
#            "version": "2017-02-28",
#            "operation": "Query",
#            "query": {
#              "expression": "UserId = :id",
#              "expressionValues": {
#                ":id": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
#              }
#            }
#          },
#          "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
#          "nextToken": $util.toJson(${ctx.args.nextToken})
#        ResponseMappingTemplate: |
#          {
#            "notes": $util.toJson($ctx.result.items),
#            "nextToken": $util.toJson(${ctx.args.nextToken})
#          }
#
#    AppSyncGetNoteQueryResolver:
#      Type: "AWS::AppSync::Resolver"
#      DependsOn: AppSyncSchema
#      Properties:
#        ApiId: !GetAtt AppSyncApi.ApiId
#        TypeName: Query
#        FieldName: getNote
#        DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
#        RequestMappingTemplate: |
#          {
#            "version": "2012-02-28",
#            "operation": "GetItem",
#            "key": {
#              "NoteId": $util.dynamodb.toDynamoDBJson($ctx.args.NoteId),
#              "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
#            }
#          }
#        ResponseMappingTemplate: "$util.toJson($ctx.result)"
#
#    AppSyncSaveNoteMutationResolver:
#      Type: "AWS::AppSync::Resolver"
#      DependsOn: AppSyncSchema
#      Properties:
#        ApiId: !GetAtt AppSyncApi.ApiId
#        TypeName: Mutation
#        FieldName: saveNote
#        DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
#        RequestMappingTemplate: |
#          {
#            "version": "2012-02-28",
#            "operation": "PutItem",
#            "key": {
#              "NoteId": $util.dynamodb.toDynamoDBJson($ctx.args.NoteId),
#              "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
#            },
#            "attributeValues": {
#              "title": $util.dynamodb.toDynamoDBJson($ctx.args.title),
#              "content": $util.dynamodb.toDynamoDBJson($ctx.args.content)
#            }
#          }
#        ResponseMappingTemplate: "$util.toJson($ctx.result)"
#
#    AppSyncDeleteNoteMutationResolver:
#      Type: "AWS::AppSync::Resolver"
#      DependsOn: AppSyncSchema
#      Properties:
#        ApiId: !GetAtt AppSyncApi.ApiId
#        TypeName: Mutation
#        FieldName: deleteNote
#        DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
#        RequestMappingTemplate: |
#          {
#            "version": "2012-02-28",
#            "operation": "DeleteItem",
#            "key": {
#              "NoteId": $util.dynamodb.toDynamoDBJson($ctx.args.NoteId),
#              "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
#            }
#          }
#        ResponseMappingTemplate: "$util.toJson($ctx.result)"

#  Outputs:
#    CognitoUserPoolId:
#      Description: The Pool ID of the Cognito User Pool
#      Value: { Ref: UserPool }
#    CognitoUserPoolClientId:
#      Description: The Client ID for AWS AppSync Auth
#      Value: { Ref: UserPoolClient }
#    DynamoDBNotesTableName:
#      Description: The name of the DynamoDB Table
#      Value: { Ref: DynamoDBNotesTable }
#    GraphQLApiEndpoint:
#      Description: The URL to the GraphQL Endpoint
#      Value: { Fn::GetAtt: [ AppSyncApi, GraphQLUrl ] }
#    GraphQLApiId:
#      Description: The API ID of the GraphQL API
#      Value: { Fn::GetAtt: [ AppSyncApi, ApiId ] }
